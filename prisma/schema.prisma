// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HotelConfig {
  name  String          @id
  type  HotelConfigType
  value String

  @@map("hotel-config")
}

enum HotelConfigType {
  STRING
  FLOAT
  INT

  @@map("hotel-config-types")
}

model FinancialData {
  date                          DateTime                        @id @db.Date
  forecastRoomsOccupied         Int?                            @map("forecast-rooms-occupied")
  forecastRoomsRevenue          Float?                          @map("forecast-rooms-revenue")
  forecastOtherRevenue          Float?                          @map("forecast-other-revenue")
  forecastOutlookRevenue        Float[]                         @map("forecast-outlook-revenue")
  forecastOutlookRooms          Int[]                           @map("forecast-outlook-rooms")
  budgetRoomsOccupied           Int?                            @map("budget-rooms-occupied")
  budgetRoomsRevenue            Float?                          @map("budget-rooms-revenue")
  budgetOtherRevenue            Float?                          @map("budget-other-revenue")
  budgetOutlookRevenue          Float[]                         @map("budget-outlook-revenue")
  budgetOutlookRooms            Int[]                           @map("budget-outlook-rooms")
  availableRooms                Int?                            @map("available-rooms")
  availableRoomsOutlook         Int[]                           @map("available-rooms-outlook")
  FinancialDataFoodservice      FinancialDataFoodservice[]
  FinancialDataFoodserviceCover FinancialDataFoodserviceCover[]

  @@map("financial-data")
}

model FinancialDataFoodservice {
  date              DateTime          @db.Date
  FinancialData     FinancialData     @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  posting           FoodserviceGroup
  FoodserviceType   FoodserviceType   @relation(fields: [posting], references: [FoodserviceGroup])
  value             Float

  @@id(name: "id", fields: [date, outlet, posting])
  @@map("financial-data-foodservice")
}

model FinancialDataFoodserviceCover {
  date              DateTime          @db.Date
  FinancialData     FinancialData     @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  value             Int

  @@id(name: "id", fields: [date, outlet])
  @@map("financial-data-foodservice-covers")
}

model RollingForecast {
  date                            DateTime                          @id @db.Date
  roomsOccupied                   Int?                              @map("rooms-occupied")
  roomsRevenue                    Float?                            @map("rooms-revenue")
  otherRevenue                    Float?                            @map("other-revenue")
  RollingForecastFoodservice      RollingForecastFoodservice[]
  RollingForecastFoodserviceCover RollingForecastFoodserviceCover[]

  @@map("rolling-forecast")
}

model RollingForecastFoodservice {
  date              DateTime          @db.Date
  RollingForecast   RollingForecast   @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  posting           FoodserviceGroup
  FoodserviceType   FoodserviceType   @relation(fields: [posting], references: [FoodserviceGroup])
  value             Float

  @@id(name: "id", fields: [date, outlet, posting])
  @@map("rolling-forecast-foodservice")
}

model RollingForecastFoodserviceCover {
  date              DateTime          @db.Date
  RollingForecast   RollingForecast   @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  value             Int

  @@id(name: "id", fields: [date, outlet])
  @@map("rolling-forecast-foodservice-covers")
}

model DailyData {
  date                          DateTime                @id @db.Date
  guestLedger                   Float?                  @map("guest-ledger")
  ARLedger                      Float?                  @map("AR-ledger")
  depositLedger                 Float?                  @map("deposit-ledger")
  packageLedger                 Float?                  @map("package-ledger")
  DailyMarketSegment            DailyMarketSegment[]
  totalRevenue                  Float?                  @map("total-revenue")
  compHouseRooms                Int?                    @map("comp-house-rooms")
  noShowRooms                   Int?                    @map("no-show-rooms")
  OOORooms                      Int?                    @map("ooo-rooms")
  arrivalRooms                  Int?                    @map("arrival-rooms")
  departureRooms                Int?                    @map("departure-rooms")
  guestInHouse                  Int?                    @map("guest-in-house")
  cancellationsToday            Int?                    @map("cancellations-today")
  earlyDepartureRooms           Int?                    @map("early-departure-rooms")
  extendedRooms                 Int?                    @map("extended-rooms")
  walkInRooms                   Int?                    @map("walk-in-rooms")
  tomorrowArrivalRooms          Int?                    @map("tomorrow-arrival-rooms")
  tomorrowDepartureRooms        Int?                    @map("tomorrow-departure-rooms")
  enrollments                   Int?
  nextMonthsOutlookRooms        Int[]                   @map("next-months-outlook-rooms")
  nextMonthsOutlookRevenue      Float[]                 @map("next-months-outlook-revenue")
  onTheBooksOccupancy           Int[]                   @map("on-the-books-occpancy")
  DailyFoodservice              DailyFoodservice[]
  DailyFoodserviceCover         DailyFoodserviceCover[]
  foodserviceCorrectionOpera    Float?                  @map("foodservice-correction-opera")
  foodserviceCorrectionSimphony Float?                  @map("foodservice-correction-simphony")
  DailyEvent                    DailyEvent[]
  DailyPosting                  DailyPosting[]

  @@map("daily-data")
}

model DailyEvent {
  date       DateTime  @db.Date
  DailyData  DailyData @relation(fields: [date], references: [date], onDelete: Cascade)
  name       String
  company    String
  roomnights Int
  checkin    DateTime  @map("check-in") @db.Date
  checkout   DateTime  @map("check-out") @db.Date
  status     String

  @@id(name: "id", fields: [date, name])
  @@map("daily-events")
}

model DailyPosting {
  date        DateTime    @db.Date
  DailyData   DailyData   @relation(fields: [date], references: [date], onDelete: Cascade)
  code        Int
  PostingCode PostingCode @relation(fields: [code], references: [code])
  value       Float

  @@id(name: "id", fields: [date, code])
  @@map("daily-posting")
}

model DailyFoodserviceCover {
  date              DateTime          @db.Date
  DailyData         DailyData         @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  value             Int

  @@id(name: "id", fields: [date, outlet])
  @@map("daily-foodservice-covers")
}

model DailyFoodservice {
  date              DateTime          @db.Date
  DailyData         DailyData         @relation(fields: [date], references: [date], onDelete: Cascade)
  outlet            PostingSubgroup
  FoodserviceOutlet FoodserviceOutlet @relation(fields: [outlet], references: [subgroup])
  posting           FoodserviceGroup
  FoodserviceType   FoodserviceType   @relation(fields: [posting], references: [FoodserviceGroup])
  value             Float

  @@id(name: "id", fields: [date, outlet, posting])
  @@map("daily-foodservice")
}

model DailyMarketSegment {
  date               DateTime      @db.Date
  DailyData          DailyData     @relation(fields: [date], references: [date], onDelete: Cascade)
  segment            String        @db.Char(1)
  MarketSegment      MarketSegment @relation(fields: [segment], references: [code])
  pastDayRoom        Int?          @map("past-day-rooms")
  pastDayRevenue     Float?        @map("past-day-revenue")
  restOfMonthRoom    Int?          @map("rest-of-month-rooms")
  restOfMonthRevenue Float?        @map("rest-of-month-revenue")

  @@id(name: "id", fields: [date, segment])
  @@map("daily-market-segment")
}

model MarketSegment {
  code               String               @id @db.Char(1)
  description        String
  DailyMarketSegment DailyMarketSegment[]

  @@map("market-segments")
}

model FoodserviceOutlet {
  subgroup                        PostingSubgroup                   @id
  group                           PostingGroup                      @default(FOODSERVICE)
  type                            PostingType                       @relation(fields: [group, subgroup], references: [group, subgroup])
  name                            String?
  DailyFoodservice                DailyFoodservice[]
  DailyFoodserviceCover           DailyFoodserviceCover[]
  RollingForecastFoodservice      RollingForecastFoodservice[]
  RollingForecastFoodserviceCover RollingForecastFoodserviceCover[]
  FinancialDataFoodservice        FinancialDataFoodservice[]
  FinancialDataFoodserviceCover   FinancialDataFoodserviceCover[]

  @@unique([group, subgroup])
  @@map("foodservice-outlets")
}

model PostingType {
  group             PostingGroup       @default(OTHER)
  subgroup          PostingSubgroup    @default(OTHER)
  PostingCode       PostingCode[]
  FoodserviceOutlet FoodserviceOutlet?

  @@id(name: "id", fields: [group, subgroup])
  @@map("posting-types")
}

model FoodserviceType {
  group                      PostingGroup
  FoodserviceGroup           FoodserviceGroup             @id
  name                       String
  PostingCode                PostingCode[]
  DailyFoodservice           DailyFoodservice[]
  RollingForecastFoodservice RollingForecastFoodservice[]
  FinancialDataFoodservice   FinancialDataFoodservice[]

  @@unique(fields: [group, FoodserviceGroup])
  @@map("foodservice-types")
}

model PostingCode {
  code             Int               @id
  name             String
  group            PostingGroup      @default(OTHER)
  subgroup         PostingSubgroup   @default(OTHER)
  PostingType      PostingType       @relation(fields: [group, subgroup], references: [group, subgroup])
  FoodserviceGroup FoodserviceGroup? @map("foodservice-group")
  FoodserviceType  FoodserviceType?  @relation(fields: [FoodserviceGroup, group], references: [FoodserviceGroup, group])
  tax              Int?
  taxCode          Int?              @map("tax-code")
  relTaxCode       PostingCode?      @relation("TaxCodes", fields: [taxCode], references: [code])
  relPostTaxCode   PostingCode[]     @relation("TaxCodes")
  adjCode          Int?              @map("adj-code")
  relAdjCode       PostingCode?      @relation("AdjCodes", fields: [adjCode], references: [code])
  relPostAdjCode   PostingCode[]     @relation("AdjCodes")
  DailyPosting     DailyPosting[]

  @@index(fields: [group])
  @@index(fields: [subgroup])
  @@index(fields: [FoodserviceGroup])
  @@map("posting-codes")
}

enum PostingGroup {
  ROOM
  FOODSERVICE
  MISC
  PAYMENT
  PACKAGE
  TAX
  ZZZ
  OTHER

  @@map("posting-groups")
}

enum PostingSubgroup {
  BANQUETING
  CASH
  CCARD
  DB
  INTERNAL
  INTPAY
  MISC1
  MISC2
  MISC3
  MISC5
  MISC6
  OTHER
  PACKAGE
  PAIDOUT
  NICCOLO
  MAFFEO
  ROOM_SERVICE
  MINI_BAR
  ROOM
  TAX1
  TAX2
  TAX3
  TAX4
  TAX5
  TAX6
  TAX7
  TAX8
  TAX9
  TAX10
  TAX11
  WRITEOFF
  ZZZ

  @@map("posting-subgroups")
}

enum FoodserviceGroup {
  BREAKFAST_WALKIN
  BREAKFAST_INCL
  FOOD
  BEVERAGE
  GRATUITIES
  OTHER

  @@map("foodservice-groups")
}
